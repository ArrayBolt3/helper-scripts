#!/bin/bash

## Copyright (C) 2019 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## Copyright (C) 2019 - 2019 Dipto
## See the file COPYING for copying conditions.

set -o errexit
set -o nounset
set -o errtrace
set -o pipefail

get_password() {
   ## author of contents of get_password function
   ## Dipto
   ## https://askubuntu.com/users/133486/dipto
   ##
   ## source of contents of get_password function
   ##
   ## https://askubuntu.com/a/299469/389275
   ##
   ## license:
   ## licensed under cc by-sa 3.0 with attribution required.

   local char

   password=""
   prompt=""

   while IFS= read -p "${prompt:-}" -r -s -n 1 char; do
      # Enter - accept password
      if [[ $char == $'\0' ]] ; then
         break
      fi
      # Backspace
      if [[ $char == $'\177' ]] ; then
         prompt=$'\b \b'
         password="${password%?}"
      else
         prompt='*'
         password+="$char"
      fi
   done
}

if [ "$(id -u)" != "0" ]; then
   echo "ERROR: This must be run as root (sudo)!" >&2
   exit 1
fi

if ! output=$(/usr/libexec/helper-scripts/get-user-list); then
    echo "ERROR: Failed to get user list!" >&2
    exit 1
fi

readarray -t user_list <<< "$output"

echo "Users present on the system:"
for user_entry in "${user_list[@]}"; do
   echo "   ${user_entry}";
done

read -r -p "Enter the username whose password you want to change: " user

if [ "$user" = "" ]; then
   echo "ERROR: No username provided. Please specify a username." >&2
   exit 1
fi

if ! id "$user" &>/dev/null ; then
   echo "ERROR: User '$user' does not exist. Please check the username and try again." >&2
   exit 1
fi

echo -n "Enter the new password for user '$user': "
echo
get_password
first_input="$password"
echo

echo -n "Re-enter the new password to confirm: "
echo
get_password
second_input="$password"
echo

if [ ! "$first_input" = "$second_input" ]; then
   echo "ERROR: Passwords do not match. Password has not been changed." >&2
   exit 1
fi

## Delete password if the provided new password is blank.
if [ "$first_input" = "" ]; then
   read -r -p "WARNING: You are about to delete the password for user '$user'. Continue? [Y/N] " delete_pw_yn

   if [ "${delete_pw_yn,,}" = 'y' ]; then
      passwd -d "$user"
      echo "SUCCESS: Password for user '$user' has been deleted successfully."
   else
      echo "CANCELLED deleting password for user '$user'."
   fi
   exit 0
fi

## Change the password otherwise.
echo "${user}:${password}" | chpasswd
echo "SUCCESS: Password for user '$user' has been updated successfully."
