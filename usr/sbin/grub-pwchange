#!/bin/bash

## Copyright (C) 2019 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## Copyright (C) 2019 - 2019 Dipto
## See the file COPYING for copying conditions.

set -o errexit
set -o nounset
set -o errtrace
set -o pipefail

# shellcheck source=../libexec/helper-scripts/get_colors.sh
source /usr/libexec/helper-scripts/get_colors.sh

get_password() {
   ## author of contents of get_password function
   ## Dipto
   ## https://askubuntu.com/users/133486/dipto
   ##
   ## source of contents of get_password function
   ##
   ## https://askubuntu.com/a/299469/389275
   ##
   ## license:
   ## licensed under cc by-sa 3.0 with attribution required.

   local char prompt

   password=""
   prompt=""

   while IFS= read -p "${prompt:-}" -r -s -n 1 char; do
      # Enter - accept password
      if [[ $char == $'\0' ]] ; then
         break
      fi
      # Backspace
      if [[ $char == $'\177' ]] ; then
         prompt=$'\b \b'
         password="${password%?}"
      else
         prompt='*'
         password+="$char"
      fi
   done
}

run_update_grub() {
   printf "%s\n" "$0: INFO: Running 'update-grub'..." >&2
   if update-grub ; then
      printf "%s\n" "$0: INFO: 'update-grub' success." >&2
      return 0
   fi
   printf "%s\n" "$0: ERROR: 'update-grub' failed. $0 is most \
likely only the trigger, not the cause. Unless you know this is not an issue, \
you should fix running 'update-grub', otherwise your system might no longer \
boot." >&2
   return 1
}

if [ "$(id -u)" != "0" ]; then
   printf "%s\n" "$0: ERROR: This must be run as root (sudo)!" >&2
   exit 1
fi

## Hardcoded for simplicity.
user="user"
grub_config_file="/etc/grub.d/44_password"

printf "%s\n" "$0: INFO: This is a GRUB bootloader password management tool for computers with only 1 human user. It supports:

* Setting up an encrypted bootloader password by creating GRUB account '$user' and setting a password by creating file '$grub_config_file'. (And running 'update-grub'.)
* Deleting the bootloader password by deleting file '$grub_config_file'.
* It configures GRUB to always require a password at boot for all actions.

What this tool does not deal with:

* Full Disk Encryption (FDE)

It does not support the more advanced GRUB bootloader features unneeded by most users:

* Setting up multiple GRUB user accounts.
* Fine grained permissions (require no password to boot but require a password to edit the kernel command line).
* Changing GRUB passwords previously manually set up by the user without using $0.
* Such advanced GRUB bootloader features - if needed - should be manually set up by the user.

See also user documentation:
https://www.kicksecure.com/wiki/Protection_Against_Physical_Attacks#grub-pwchange
" >&2

echo -n "Enter the new password for GRUB account '$user': " >&2
echo >&2
get_password
first_input="$password"
echo >&2

echo -n "Re-enter the new password to confirm: " >&2
echo >&2
get_password
second_input="$password"
echo >&2

if [ ! "$first_input" = "$second_input" ]; then
   printf "%s\n" "$0: ERROR: Passwords do not match. Password has not been set or changed." >&2
   exit 1
fi

## Delete password if the provided new password is blank.
if [ "$first_input" = "" ]; then
   read -r -p "WARNING: You are about to delete the password for GRUB account '$user'. Continue? [Y/N] " delete_pw_yn

   if [ "${delete_pw_yn,,}" = 'y' ]; then
      safe-rm --verbose --force -- "${grub_config_file}"
      run_update_grub
      if grub-password-status-check &>/dev/null ; then
         printf "%s\n" "$0: ERROR: A GRUB bootloader password still exists but it is not managed by '$0'. To debug, run: sudo grub-password-status-check" >&2
         exit 1
      fi
      printf "%s\n" "$0: SUCCESS: GRUB bootloader password has been deleted successfully." >&2
      exit 0
   fi

   printf "%s\n" "$0: CANCELLED disabling GRUB bootloader password." >&2
   exit 0
fi

## TODO: avoid echo
password_hash="$(echo -e "$password\n$password" | LC_ALL=C grub-mkpasswd-pbkdf2 | awk '/hash of / {print $NF}')"

## Change the password otherwise.
printf "%s\n" "\
#!/bin/sh

## This file has been auto-generated by: $0
## Manual edits will be lost time the user uses: $0
##
## Feel free to delete this file if you want to disable the GRUB bootloader password.
## Running 'sudo update-grub' is required afterwards for changes to take effect.

cat <<EOF
set superusers=\"user\"
password_pbkdf2 user $password_hash
EOF" \
| sponge -- "${grub_config_file}"
chmod +x -- "${grub_config_file}"

unset first_input
unset second_input
unset password
unset password_hash

run_update_grub

if grub-password-status-check &>/dev/null ; then
   printf "%s\n" "$0: SUCCESS: GRUB bootloader password for GRUB account '$user' has been set successfully by creating file '${grub_config_file}'." >&2
else
   printf "%s\n" "$0: ERROR: GRUB bootloader password for GRUB account '$user' failed. To debug, run: sudo grub-password-status-check" >&2
fi
