#!/bin/bash

## Copyright (C) 2014 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## Design:
## Does not needlessly set the time if not needed.
##
## used by /usr/libexec/helper-scripts/onion-time-pre-script

output_cmd() {
   msg="$@"
   echo "@ $msg"
   echo "@ $msg" | systemd-cat --identifier="anondate" || true
}

exit_handler() {
   if [ "$exit_code" = "" ]; then
      meaning="Unexpected error (1). No exit code set yet. Setting exit_code to 1."
      exit_code=1
   elif [ "$exit_code" = "0" ]; then
      meaning="Set time using Tor consensus middle range time."
   elif [ "$exit_code" = "1" ]; then
      meaning="error"
   elif [ "$exit_code" = "2" ]; then
      meaning="Success, set system clock using Tor certificate lifetime."
   elif [ "$exit_code" = "3" ]; then
      meaning="Setting time using anondate either not possible or not required."
   else
      meaning="Unexpected error (2)."
   fi
   output_cmd "END: Exiting with exit_code '$exit_code' indicating '$meaning'."
   exit "$exit_code"
}

exit_code=1

trap exit_handler EXIT

restart_tor_if_running() {
   if systemctl --no-pager --no-block status tor@default ; then
      true "INFO: tor@default running, stopping..."
      systemctl --no-pager --no-block stop tor@default || true
      true "INFO: Deleting Tor consensus..."
      ## provided by package helper-scripts
      anon-consensus-del
      true "INFO: Restart Tor..."
      systemctl --no-pager --no-block start tor@default || true
   else
      true "INFO: tor@default not running, not deleting Tor consensus and not restarting Tor."
   fi
}

set_date() {
   current_time_human_readable="$(date --utc "+%Y-%m-%d %H:%M:%S")"
   current_unixtime="$(date --utc "+%s")"

   time_result_unixtime="$(date --utc --date "$time_result_human_readable" "+%s")"

   if [ "$current_unixtime" -ge "$time_result_unixtime" ]; then
      output_cmd "INFO: The 'anondate-get' time_result is earlier than the current system time, ok. Not setting clock backwards." >&2
      if [ "$debugging" = "true" ]; then
         output_cmd "INFO: Debugging information:
   '$current_unixtime' -ge '$time_result_unixtime'
   (function: set_date)

   time_result_human_readable: '$time_result_human_readable'
   time_result_unixtime: '$time_result_unixtime'
   earlier than
   current_time_human_readable: '$current_time_human_readable'
   current_unixtime: '$current_unixtime'" >&2
      fi

      exit_code=3
      exit 3
   else
      output_cmd "INFO: The 'anondate-get' time_result is later than the current system time, ok"
   fi

   if ! minimum-time-check "$time_result_unixtime" ; then
      ## capture stdout
      minimum_unixtime_show_unixtime="$(minimum-unixtime-show 2>/dev/null)"
      ## capture stderr
      minimum_unixtime_show_human_readable="$(minimum-unixtime-show 2>&1 > /dev/null)"

      output_cmd "INFO: minimum-time-check determined the time_result earlier than minimum time, ok.

The 'anondate-get' time result is earlier than 'minimum-unixtime-show'.
Not setting system clock earlier than 'minimum-unixtime-show'.

command: minimum-time-check: '$time_result_unixtime'
(function: set_date)

time_result_human_readable: '$time_result_human_readable'
time_result_unixtime: '$time_result_unixtime'
earlier than
minimum_unixtime_show_human_readable: '$minimum_unixtime_show_human_readable'
minimum_unixtime_show_unixtime: '$minimum_unixtime_show_unixtime'" >&2

      exit_code=3
      exit 3
   else
      output_cmd "INFO: minimum-time-check determined the time_result to be later than minimum time, ok.
The 'anondate-get' time result is later than 'minimum-unixtime-show'.
Setting system clock forward."
   fi

   output_cmd "INFO: Running the following command:"
   output_cmd "date --utc \"+%Y-%m-%d %H:%M:%S\" --set \"$time_result_human_readable\""
   date --utc "+%Y-%m-%d %H:%M:%S" --set "$time_result_human_readable"
}

output_cmd "$0 - START"

if [ "$(whoami)" = "sdwdate" ]; then
   anondate_state_folder=/run/sdwdate
elif [ "$(id -u)" = "0" ]; then
   anondate_state_folder=/run/anondate
   mkdir -p "$anondate_state_folder"
else
   output_cmd "ERROR: Must run as root." >&2
   exit 112
fi

[ -n "$LC_TIME" ] || export LC_TIME=C
[ -n "$TZ" ] || export TZ=UTC

anondate_tor_certificate_lifetime_set_file="${anondate_state_folder}/tor_certificate_lifetime_set"

if test -f "$anondate_tor_certificate_lifetime_set_file" ; then
   output_cmd "INFO: Status file '$anondate_tor_certificate_lifetime_set_file' exists."
else
   output_cmd "INFO: Status file '$anondate_tor_certificate_lifetime_set_file' does not yet exist."
fi

output_cmd "INFO: running anondate-get..."

anondate_get_exit_code=0
time_result_human_readable="$(anondate-get)" || { anondate_get_exit_code="$?" ; true; };

if [ "$anondate_get_exit_code" = "0" ]; then
   output_cmd "INFO: anondate-get returned Tor consensus middle range time or minimum time."
   set_date
   exit_code=0
   exit 0
elif [ "$anondate_get_exit_code" = "1" ]; then
   output_cmd "INFO: anondate-get error."
   exit_code=1
   exit 1
elif [ "$anondate_get_exit_code" = "2" ]; then
   if test -f "$anondate_tor_certificate_lifetime_set_file" ; then
      output_cmd "INFO: No, not again setting system clock to Tor certificate lifetime."
   else
      output_cmd "INFO: Yes, setting system clock to Tor certificate lifetime."
      set_date
      output_cmd "INFO: Creating status file '$anondate_tor_certificate_lifetime_set_file'."
      touch "$anondate_tor_certificate_lifetime_set_file"
      output_cmd "INFO: Done, created status file '$anondate_tor_certificate_lifetime_set_file'."

      ## If clock was too fast, restart of Tor is required.
      if [ "$(id -u)" = "0" ]; then
         restart_tor_if_running
      else
         output_cmd "ERROR: Tor restart not implemented for users other than 'root'." >&2
         exit_code=112
         exit 112
      fi

      exit_code=2
      exit 2
   fi
fi

exit_code=3
exit 3
