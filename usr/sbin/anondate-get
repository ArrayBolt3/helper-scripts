#!/bin/bash

## Copyright (C) 2014 - 2021 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## Write all informational messages to stderr.
## Write date to stdout.

## exit codes:
## 0: show Tor consensus time middle range or minimum time
## 1: error
## 2: show Tor certificate lifetime
## 3: Could not determine any time using Tor from consensus or certificate life time.
## 4: Setting time using anondate either not possible or not required.

## If tor@default is stopped.
# sudo anondate-tester
#
# cmd_item: anondate --has-consensus
# output:
# exit_code: 4
# ----------
# cmd_item: anondate --current-time-in-valid-range
# sed: can't read /var/lib/tor/cached-microdesc-consensus: No such file or directory
# output:
# exit_code: 1
# ----------
# cmd_item: anondate --show-valid-after
# sed: can't read /var/lib/tor/cached-microdesc-consensus: No such file or directory
# output:
# exit_code: 1
# ----------
# cmd_item: anondate --show-valid-until
# sed: can't read /var/lib/tor/cached-microdesc-consensus: No such file or directory
# output:
# exit_code: 1
# ----------
# cmd_item: anondate --show-middle-range
# sed: can't read /var/lib/tor/cached-microdesc-consensus: No such file or directory
# output:
# exit_code: 1
# ----------
# cmd_item: anondate --tor-cert-lifetime-invalid
# output:
# exit_code: 3
# ----------
# cmd_item: anondate --tor-cert-valid-after
# output:
# exit_code: 3
# ----------

#set -x
set -e

date_cmd(){
   date -u +"%Y-%m-%d %T"
}

output_cmd() {
   msg="$(date_cmd) - $0 - $@"
   echo "$msg" >&2
   echo "$msg" | systemd-cat --identifier="anondate" || true
}

exit_handler() {
   if [ "$exit_code" = "" ]; then
      meaning="No exit code set yet. Setting to 1."
   fi
   if [ "$exit_code" = "0" ]; then
      meaning="Showed Tor consensus time middle range or minimum time."
   elif [ "$exit_code" = "1" ]; then
      meaning="error"
   elif [ "$exit_code" = "2" ]; then
      meaning="Showed Tor certificate life time."
   elif [ "$exit_code" = "3" ]; then
      meaning="Could not determine any time using Tor from consensus or certificate life time."
   elif [ "$exit_code" = "4" ]; then
      meaning="Setting time using anondate either not possible or not required."
   fi

   output_cmd "END: Exiting with exit_code '$exit_code' indicating '$meaning'."
   exit "$exit_code"
}

minimum_time_check() {
   if ! minimum-time-check "$1" ; then
      time_result_unixtime="$(date --utc --date="$time_result" "+%s")"

      output_cmd "ERROR: minimum-time-check failed.
command: minimum-time-check '$time_result_unixtime'

                   time_result '$time_result'
                time_result_unixtime '$time_result_unixtime'
earlier than
minimum_unixtime_show_human_readable '$minimum_unixtime_show_human_readable'
minimum_unixtime_show_unixtime '$minimum_unixtime_show_unixtime'"

      return 1
   fi
   output_cmd "INFO: time_result later than minimum-unixtime-show, ok."
}

exit_code=1

trap exit_handler EXIT

if [ "$(whoami)" = "sdwdate" ]; then
   anondate_state_folder=/run/sdwdate
elif [ "$(id -u)" = "0" ]; then
   anondate_state_folder=/run/anondate
else
   output_cmd "ERROR: Must run as root."
   exit_code=112
   exit 112
fi

[ -n "$LC_TIME" ] || export LC_TIME=C
[ -n "$TZ" ] || export TZ=UTC

## capture stdout
minimum_unixtime_show_unixtime="$(minimum-unixtime-show 2>/dev/null)"
## capture stderr
minimum_unixtime_show_human_readable="$(minimum-unixtime-show 2>&1 > /dev/null)"

anondate_tor_certificate_lifetime_set_file="${anondate_state_folder}/tor_certificate_lifetime_set"

source /usr/libexec/helper-scripts/tor_bootstrap_check.bsh
check_tor_bootstrap_helper

if [ "$tor_bootstrap_percent" = "100" ]; then
   output_cmd "INFO: 100% Tor bootstrap, ok."
   if tor_circuit_established_check="$(/usr/bin/tor-circuit-established-check)" ; then
      output_cmd "INFO: tor_circuit_established_check.py, ok."
      if [ "$tor_circuit_established_check" = "1" ]; then
         output_cmd "INFO: Tor circuit already established, ok."
      else
         output_cmd "WARNING: Tor circuit not yet established."
      fi
   else
      output_cmd "WARNING: tor_circuit_established_check.py failed."
   fi
else
   output_cmd "WARNING: Tor bootstrap not done."
fi

## TODO: Tor cert valid after must be after Tor consensus middle range to avoid using stale Tor consensus

## Needs access to TOR_DIR /var/lib/tor.
# if anondate --has-consensus ; then
# output_cmd "INFO: has Tor consensus, ok."

if time_result="$(anondate --show-middle-range)" ; then
   valid_after="$(anondate --show-valid-after)"
   ## example valid_after:
   ## 2021-01-21 15:00:00
   valid_until="$(anondate --show-valid-until)"
   ## example valid_until:
   ## 2021-01-21 18:00:00

   range_info="valid_after: $valid_after | middle_range: $time_result | valid_until: $valid_until"

   if [ "$time_result" = "" ]; then
      output_cmd "WARNING: Tor consensus time middle range result empty."
   elif anondate --current-time-in-valid-range ; then
      output_cmd "INFO: local system time is already within valid range, ok. ($range_info)"
      if minimum_time_check "$time_result" ; then
         exit_code=4
         ## Deliberately not 'exit' here.
         ## Tor consensus might be outdated.
         ## Permit script to flow through 'anondate --tor-cert-lifetime-valid' part.
      fi
   else
      output_cmd "WARNING: local system time is NOT with valid time range. ($range_info)"
      output_cmd "INFO: middle_range: '$time_result'"
      if minimum_time_check "$time_result" ; then
         echo "$time_result"
         exit_code="0"
         exit 0
      fi
   fi
else
   output_cmd "WARNING: could not determine Tor consensus time middle range."
fi

# else
#    output_cmd "WARNING: has no Tor consensus yet."
# fi

if anondate --tor-cert-lifetime-valid ; then
   output_cmd "INFO: Tor certificate lifetime valid, ok."
else
   output_cmd "WARNING: Tor certificate lifetime invalid according to Tor log. This information might be outdated and not matter."
   if time_result="$(anondate --tor-cert-valid-after)" ; then
      output_cmd "INFO: Tor certificate life date: $time_result"
      time_result_unixtime="$(date --utc --date="$time_result" "+%s")"
      current_unixtime="$(date --utc "+%s")"
      if [ "$current_unixtime" -ge "$time_result_unixtime" ]; then
         output_cmd "INFO: System clock is LATER than Tor certificate life date, ok."
      else
         output_cmd "INFO: System clock is EARLIER than Tor certificate life date."
      fi
      if minimum_time_check "$time_result" ; then
         output_cmd "$time_result"
         exit_code=2
         exit 2
      else
         output_cmd "INFO: Show minimum time instead."
         output_cmd "INFO: minimum time: $minimum_unixtime_show_human_readable"
         echo "$minimum_unixtime_show_human_readable"
         exit_code=0
         exit 0
      fi
   else
      output_cmd "WARNING: Could not find out Tor certificate life date."
   fi
fi

if [ "$exit_code" = "" ]; then
   exit_code=3
fi
exit "$exit_code"
