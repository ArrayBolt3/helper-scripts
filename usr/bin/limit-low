#!/bin/bash

## Copyright (C) 2020 - 2020 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## If you modify limit-low, also consider similar modification to other
## 'limit-*' wrapper scripts such as limit-medium and limit-high.

## limit-low design goals:
## - Do one thing and do it well.
## - The one thing is to be a wrapper that limits system resources for wrapped
##   applications.
## - Support being run as:
##   - user
##   - root
##   - in shell or script in pipes
##   - stdout, stderr, stdin interactive shell input/output
##   - graphical (GUI) applications
## - Being as non-intrusive as possible. For example, not adding extraneous
##   output to stdout such as
##   "Running scope as unit: run-r0d607a8f35dc4dea909b830f9d922b99.scope".

## usage examples:
##
## run system resources limited as user:
## limit-low stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s
##
## run system resources limited application as root:
## sudo limit-low stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s
##
## use inside pipes:
## echo a | limit-low grep a
##
## interactive use:
## limit-low nano file-name

## constrained system resources program starter wrapper
## https://github.com/systemd/systemd/issues/16180

set -e

if [ "$(id -u)" != "0" ]; then
   ## Not running as root user.
   ## I.e. running as a user such as user "user".
   ## Therefore adding parameter "--user".
   user_arg="--user"

   ## Otherwise some environment variables are missing in Non-Qubes-Whonix.
   ## This lead to Tor Browser issues due to missing environment variables.
   systemctl -user import-environment
else
   user_arg=""

   ## Not doing this because there is no known user case that requires this and
   ## because the security impact of this has not been researched.
   #systemctl import-environment
   ## When researching this, run:
   ## systemctl show-environment
   ## systemctl import-environment
   ## systemctl show-environment
   ## And then compare the difference.
fi

if [ "$DEBUG" = "true" ] ;then
   quiet_maybe=""
   unit_maybe="--unit=testtest"

   ## useful for debugging (root):
   ## sudo systemctl show testtest.scope
   ## sudo systemctl show testtest.scope | grep CPU
   ## sudo systemctl status testtest.scop

   ## useful for debugging (user):
   ## systemctl --user show testtest.scope
   ## systemctl --user show testtest.scope | grep CPU
   ## systemctl --user status testtest.scop

   ## Example systemd-run output:
   ## Running scope as unit: run-r0d607a8f35dc4dea909b830f9d922b99.scope
else
   quiet_maybe="--quiet"
   unit_maybe=""
fi

## https://www.freedesktop.org/software/systemd/man/systemd-run.html
## https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html

## TODO: MemoryHigh and MemoryMax should be relative values. Not hardcoded.

## Using similar parameters below.
## Quote systemd.resource-control:
## --shell, -S
## A shortcut for "--pty --same-dir --wait --collect --service-type=exec $SHELL", i.e. requests an interactive shell in the current working directory, running in service context, accessible with a single switch.

## --pty/--pipe is not compatible in timer or --scope mode.

systemd-run \
   --pty --same-dir --wait --collect --service-type=exec \
   --pipe \
   $user_arg \
   $quiet_maybe \
   $unit_maybe \
   --nice=19 \
   --property=MemoryAccounting=yes \
   --property=MemoryHigh=300M \
   --property=MemoryMax=500M \
   --property=CPUAccounting=yes \
   --property=CPUQuota=5% \
   --property=CPUWeight=1 \
   --property=CPUShares=2 \
   --property=TasksAccounting=yes \
   --property=TasksMax=200 \
   --property=IOAccounting=yes \
   --property=IOWeight=1 \
   --property=IOReadIOPSMax="/dev/disk/ 1K" \
   -- \
   "$@"

## requires package dbus-user-session
## systemd-run --pty --same-dir --wait --collect --service-type=exec --pipe --user --quiet --nice=19 --property=MemoryAccounting=yes --property=MemoryHigh=300M --property=MemoryMax=500M --property=CPUAccounting=yes --property=CPUQuota=5% --property=CPUWeight=1 --property=CPUShares=2 --property=TasksAccounting=yes --property=TasksMax=200 --property=IOAccounting=yes --property=IOWeight=1 '--property=IOReadIOPSMax=/dev/disk/ 1K' -- mousepad
##
## Otherwise:
## Failed to start transient service unit: Process org.freedesktop.systemd1 exited with status 1

true "$0: OK"
