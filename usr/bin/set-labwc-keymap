#!/bin/bash

## Copyright (C) 2025 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -o errexit
set -o nounset
set -o errtrace
set -o pipefail

true "$0: START"

command -v safe-rm >/dev/null
command -v localectl >/dev/null
command -v mktemp >/dev/null
command -v mv >/dev/null
command -v dirname >/dev/null
command -v mkdir >/dev/null
command -v overwrite >/dev/null
command -v stcat >/dev/null

xkb_variable_names=(
  'XKB_DEFAULT_LAYOUT'
  'XKB_DEFAULT_VARIANT'
  'XKB_DEFAULT_OPTIONS'
)
do_persist='false'
no_reload='false'
interactive='false'
labwc_config_path="${HOME}/.config/labwc/environment"

## Checks to see if all items in "check_str" are present in the output of a
## command that lists valid items.
is_layout_data_valid() {
  local valid_list_cmd check_str check_list check_item valid_item_list \
    valid_item is_item_valid

  check_str="${1:-}"
  shift
  valid_list_cmd=( "$@" )
  if [ "${#valid_list_cmd[@]}" = '0' ] || [ -z "${valid_list_cmd[0]}" ]; then\
    return 1
  fi
  if [ -z "${check_str}" ]; then return 1; fi

  readarray -t check_list < <(printf '%s\n' "${check_str}" | tr ',' '\n')
  readarray -t valid_item_list < <("${valid_list_cmd[@]}")

  for check_item in "${check_list[@]}"; do
    if [ -z "${check_item}" ]; then continue; fi
    is_item_valid='false'
    for valid_item in "${valid_item_list[@]}"; do
      if [ "${check_item}" = "${valid_item}" ]; then
        is_item_valid='true'
        break
      fi
    done
    if [ "${is_item_valid}" = 'false' ]; then
      return 1
    fi
  done

  return 0
}

check_keyboard_layouts() {
  local layout_str kb_layout_list

  layout_str="${1:-}"
  if [ -z "${layout_str}" ]; then
    printf '%s\n' "$0: ERROR: Empty keyboard layout string provided!" >&2
    return 1
  fi

  ## Ensure the user has no more than four keyboard layouts specified (this
  ## is the maximum number supported by XKB under X11 according to
  ## https://www.x.org/archive/X11R7.5/doc/input/XKB-Config.html, and it is
  ## the maximum number labwc appears to support).
  readarray -t kb_layout_list < <(printf '%s\n' "${layout_str}" | tr ',' '\n')
  if (( ${#kb_layout_list[@]} > 4 )); then
    printf '%s\n' "$0: ERROR: Too many keyboard layouts specified, must specify 4 or less!" >&2
    return 1
  fi

  ## Ensure the specified keyboard layout(s) are valid.
  if ! is_layout_data_valid "${layout_str}" \
    localectl list-x11-keymap-layouts ; then
    printf '%s\n' "$0: ERROR: Specified keyboard layout(s) are not all valid!" >&2
    if [ "${interactive}" = 'false' ]; then
      printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-layouts' to get a list of valid layouts." >&2
    fi
    return 1
  fi

  return 0
}

check_keyboard_layout_variants() {
  local layout_str variant_str kb_layout_list kb_variant_list kb_idx

  layout_str="${1:-}"
  variant_str="${2:-}"
  if [ -z "${layout_str}" ]; then
    printf '%s\n' "$0: ERROR: Empty keyboard layout string provided!" >&2
    return 1
  fi
  if [ -z "${variant_str}" ]; then
    printf '%s\n' "$0: ERROR: Empty keyboard layout variant string provided!" >&2
    return 1
  fi

  readarray -t kb_layout_list < <(printf '%s\n' "${layout_str}" | tr ',' '\n')
  ## Don't redo the keyboard layout count check, that's been done by
  ## check_keyboard_layouts already
  readarray -t kb_variant_list < <(printf '%s\n' "${variant_str}" | tr ',' '\n')

  if (( ${#kb_layout_list[@]} < ${#kb_variant_list[@]} )); then
    printf '%s\n' "$0: ERROR: Insufficient number of keyboard layouts specified for number of variants!" >&2
    return 1
  fi

  for kb_idx in "${!kb_layout_list[@]}"; do
    if [ -z "${kb_variant_list[kb_idx]}" ]; then continue; fi
    if ! is_layout_data_valid "${kb_variant_list[kb_idx]}" \
      localectl list-x11-keymap-variants "${kb_layout_list[kb_idx]}" ; then
      printf '%s\n' "$0: ERROR: Specified keyboard layout variant for layout '${kb_layout_list[kb_idx]}' is not valid!" >&2
      if [ "${interactive}" = 'false' ]; then
        printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-variants ${kb_layout_list[kb_idx]}' to get a list of valid layout variants for the '${kb_layout_list[kb_idx]}' layout." >&2
      fi
      return 1
    fi
  done
}

check_keyboard_layout_options() {
  local option_str

  option_str="${1:-}"
  if [ -z "${option_str}" ]; then
    printf '%s\n' "$0: ERROR: Empty keyboard layout options string provided!" >&2
    return 1
  fi

  if ! is_layout_data_valid "${option_str}" \
    localectl list-x11-keymap-options ; then
    printf '%s\n' "$0: ERROR: Specified keyboard layout option(s) are not valid!" >&2
    if [ "${interactive}" = 'false' ]; then
      printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-options' to get a list of valid layout options." >&2
    fi
    return 1
  fi
}

## Sets the XKB layout(s), variant(s), and option(s) in labwc, either for just
## this session or persistently.
set_labwc_keymap() {
  local labwc_config_bak_path labwc_env_file_lines did_replace_var var_idx \
    conf_idx args labwc_env_file_string labwc_config_directory

  labwc_config_bak_path=''
  labwc_env_file_lines=()
  args=( "$@" )
  if [ "${#args[@]}" != '3' ]; then
    printf '%s\n' "$0: ERROR: Argument handling failure!" >&2
    return 1
  fi

  ## Interactive mode checks the layouts for us already, no need to do it
  ## twice.
  if [ "${interactive}" = 'false' ]; then
    check_keyboard_layouts "${args[0]}" || return 1
    if [ -n "${args[1]:-}" ]; then
      check_keyboard_layout_variants "${args[0]}" "${args[1]}" || return 1
    fi
    if [ -n "${args[2]:-}" ]; then
      check_keyboard_layout_options "${args[2]}"
    fi
  fi

  labwc_config_directory="$(dirname -- "${labwc_config_path}")"

  ## Ensure the labwc configuration directory exists.
  mkdir --parents -- "${labwc_config_directory}" || {
    printf '%s\n' "$0: ERROR: Cannot create labwc config directory '${labwc_config_directory}!" >&2
    return 1
  }

  ## If labwc's environment config file exists, read it.
  if [ -f "${labwc_config_path}" ]; then
    if ! [ -r "${labwc_config_path}" ]; then
      printf '%s\n' "$0: ERROR: Cannot read existing labwc environment config '${labwc_config_path}'!" >&2
      return 1
    fi

    readarray -t labwc_env_file_lines < "${labwc_config_path}"

    ## If we do not want the new configuration to be persistent, move the
    ## existing configuration to a temporary backup location.
    if [ "${do_persist}" = 'false' ]; then
      labwc_config_bak_path="$(mktemp)"
      mv -- "${labwc_config_path}" "${labwc_config_bak_path}" || {
        printf '%s\n' "$0: ERROR: Cannot move existing labwc environment config '${labwc_config_path}' to backup location '${labwc_config_bak_path}'!" >&2
        return 1
      }
    fi
  fi

  ## Loop through the variables we want to set. For each variable in `args`,
  ## the variable's name is specified in the corresponding element in
  ## `xkb_variable_names`.
  for var_idx in "${!args[@]}"; do
    if (( var_idx >= 3 )); then break; fi

    ## Loop through the lines of the existing labwc environment configuration.
    ## Change already-set keyboard-layout-related variables to new values,
    ## append variables that we want to set but that aren't defined yet.
    ## Remove duplicate variable assignments so that the variables we set
    ## don't get overridden.
    did_replace_var='false'
    for conf_idx in "${!labwc_env_file_lines[@]}"; do
      ## Note that we use a capturing group around leading whitespace - this
      ## allows us to prepend ${BASH_REMATCH[1]} to the replacement line,
      ## preserving the indentation.
      if [[ "${labwc_env_file_lines[conf_idx]}" \
        =~ ^([[:space:]]*)"${xkb_variable_names[var_idx]}=" ]]; then
        if [ "${did_replace_var}" = 'false' ]; then
          labwc_env_file_lines[conf_idx]="${BASH_REMATCH[1]}${xkb_variable_names[var_idx]}=${args[var_idx]}"
          did_replace_var='true'
        else
          unset "labwc_env_file_lines[${conf_idx}]"
        fi
      fi
    done

    ## Remove any holes from the `labwc_env_file_lines` array.
    labwc_env_file_lines=( "${labwc_env_file_lines[@]}" )

    ## If we replaced a variable assignment in the configuration file, skip
    ## the rest of this loop iteration.
    if [ "${did_replace_var}" = 'true' ]; then
      continue
    fi

    ## Append the new environment variable to the configuration file's
    ## contents.
    labwc_env_file_lines+=(
      "${xkb_variable_names[var_idx]}=${args[var_idx]}"
    )
  done

  labwc_env_file_string="$(printf '%s\n' "${labwc_env_file_lines[@]}")"

  ## Write the new config file contents and load them into labwc.
  overwrite "${labwc_config_path}" "${labwc_env_file_string}" >/dev/null || {
    printf '%s\n' "$0: ERROR: Cannot write new labwc environment config '${labwc_config_path}'!" >&2
    return 1
  }

  if [ "${no_reload}" = 'false' ]; then
    if ! command -v labwc >/dev/null; then
      printf '%s\n' "$0: WARNING: 'labwc' not available in PATH or not installed." >&2
    else
      if labwc --reconfigure; then
        printf '%s\n' "$0: INFO: 'labwc --reconfigure' OK." >&2
      else
        printf '%s\n' "$0: WARNING: 'labwc --reconfigure' reconfiguration failed!" >&2
      fi
    fi
  fi

  ## If we do not want to persist the new configuration, put the old
  ## configuration back (or just delete the new config file if there wasn't an
  ## old config file).
  if [ -n "${labwc_config_bak_path}" ]; then
    mv -- "${labwc_config_bak_path}" "${labwc_config_path}" || {
      printf '%s\n' "$0: ERROR: Cannot move backup labwc environment config '${labwc_config_bak_path}' to original location '${labwc_config_path}'!" >&2
      return 1
    }
    printf '%s\n' "INFO: new '${labwc_config_path}' contents:" >&2
    stcat "${labwc_config_path}" >&2
  elif [ "${do_persist}" = 'true' ]; then
    printf '%s\n' "INFO: new '${labwc_config_path}' contents:" >&2
    stcat "${labwc_config_path}" >&2
  elif [ "${do_persist}" = 'false' ]; then
    safe-rm -- "${labwc_config_path}" || {
      printf '%s\n' "$0: ERROR: Cannot remove temporary labwc environment config '${labwc_config_path}'!" >&2
      return 1
    }
  fi
}

interactive_ui_help_layout() {
  printf '%s\n' 'Each keyboard layout supported by the system has a short, usually two-letter'
  printf '%s\n' 'code associated with it. The code generally corresponds to the nation the'
  printf '%s\n' 'layout is most commonly used in. Some common layouts, in alphabetical order:'
  printf '%s\n' '- cz -> Czech (QWERTZ)'
  printf '%s\n' '- de -> German (QWERTZ)'
  printf '%s\n' '- es -> Spanish (QWERTY)'
  printf '%s\n' '- us -> English (US QWERTY)'
  printf '\n'
  printf '%s\n' 'Multiple keyboard layouts may be specified at once if you intend to switch'
  printf '%s\n' 'between layouts frequently. Layouts must be comma-separated. A maximum of'
  printf '%s\n' 'four may be set at any one time.'
  printf '\n'
  printf '%s\n' 'For instance, to set US English, German, and Czech as the keyboard layouts,'
  printf '%s\n' 'specify "us,de,cz".'
  printf '\n'
}

interactive_ui_help_variant() {
  printf '%s\n' 'Each keyboard layout may optionally have a variant associated with it.'
  printf '%s\n' 'Variants are used to select alternate keyboard layouts for the same'
  printf '%s\n' 'language, such as Dvorak and Colemak. You should only use variants if you'
  printf '%s\n' 'know they are useful to you.'
  printf '\n'
  printf '%s\n' 'If you choose to specify keyboard layout variants, you must specify one'
  printf '%s\n' 'variant per layout chosen earlier. Similar to layouts, variants must be'
  printf '%s\n' 'comma-separated. If you wish to skip setting the layout for a variant, omit'
  printf '%s\n' 'the variant from the list, but do not omit the comma that would have been.'
  printf '%s\n' 'typed if you had specified a variant.'
  printf '\n'
  printf '%s\n' 'For instance, to set English (US Dvorak) and English (US Colemak) layouts,'
  printf '%s\n' 'specify "us,us" as the keyboard layouts and "dvorak,colemak" as the'
  printf '%s\n' 'variants. To set English (US QWERTY), English (US Dvorak), and German'
  printf '%s\n' '(QWERTZ) layouts, specify "us,us,de" as the keyboard layouts and ",dvorak,"'
  printf '%s\n' 'as the variants.'
  printf '\n'
}

interactive_ui_help_option() {
  printf '%s\n' 'A number of keyboard layout customizations may be applied using options.'
  printf '%s\n' 'Some common options:'
  printf '%s\n' '- compose:ralt -> Sets the right Alt key as the Compose key, useful for'
  printf '%s\n' '  typing accent marks and other characters not ofentimes typed with the'
  printf '%s\n' '  chosen layout'
  printf '%s\n' '- grp:alt_shift_toggle -> Toggles between keyboard layouts any time'
  printf '%s\n' '  Alt+Shift is pressed.'
  printf '%s\n' '- caps:backspace -> Makes the Caps Lock key act as a second backspace key.'
  printf '\n'
  printf '%s\n' 'Multiple keyboard options may be specified at once. Options must be'
  printf '%s\n' 'comma-separated.'
  printf '\n'
  printf '%s\n' 'For instance, to set the right Alt key as the Compose key, and make'
  printf '%s\n' 'Alt+Shift the keyboard layout switch shortcut, specify'
  printf '%s\n' '"compose:ralt,grp:alt_shift_toggle" as the keyboard layout options.'
}

interactive_ui() {
  local layout_str variant_str option_str variant_key_str

  printf '%s\n' 'Type "list" at any prompt to see a list of valid options.'
  printf '%s\n' 'If the list is longer than will fit on the screen, use arrow keys to scroll.'
  printf '%s\n' 'Press "q" to exit the scrollable list.'
  printf '\n'
  printf '%s\n' 'Type "help" for help.'
  printf '\n'
  printf '%s\n' 'Type "exit" to quit without changing keyboard layout settings.'
  printf '\n'

  while true; do
    read -r -p 'Enter the keyboard layout(s) you would like to use: ' -- layout_str
    printf '\n'
    if [ -z "${layout_str}" ]; then
      printf '%s\n' 'No keyboard layouts specified. Exiting.'
      return 0
    fi
    ## Normalize the layout string so it is all lowercase and has no spaces in
    ## it. This way whether the user specifies "us,de" or "us, de" or 'US, DE'
    ## or even "U   s,de     ,    eS", it works. No XKB keyboard layouts
    ## contain spaces or capital letters.
    layout_str="$(tr -d ' ' <<< "${layout_str,,}")"
    if [ "${layout_str}" = 'list' ]; then
      localectl list-x11-keymap-layouts
      continue
    fi
    if [ "${layout_str}" = 'help' ]; then
      interactive_ui_help_layout
      continue
    fi
    if [ "${layout_str}" = 'exit' ]; then
      printf '%s\n' "$0: INFO: Exiting without setting keyboard layout."
      exit 0
    fi
    if check_keyboard_layouts "${layout_str}"; then
      break
    fi
  done

  while true; do
    read -r -p 'Enter the keyboard layout variant(s) if desired, leave empty otherwise: ' -- variant_str
    printf '\n'
    if [ -z "${variant_str}" ]; then
      break
    fi
    ## Normalize the variant string similar to how we normalize the layout
    ## string. Unfortunately, some variants like "UnicodeExpert" contain
    ## capitals, so we can't normalize everything to lowercase.
    variant_str="$(tr -d ' ' <<< "${variant_str}")"
    if [ "${variant_str,,}" = 'list' ]; then
      if ! grep -q ',' <<< "${layout_str}"; then
        localectl list-x11-keymap-variants "${layout_str}"
      else
        read -r -p 'Enter the keyboard layout to view variants for: ' -- variant_key_str
        variant_key_str="$(tr -d ' ' <<< "${variant_key_str,,}")"
        if grep -q ',' <<< "${variant_key_str}" ; then
          printf '%s\n' "$0: ERROR: Only one layout may be specified to view the variants of!"
          continue
        fi
        if ! [[ "${layout_str}" =~ (^|,)"${variant_key_str}"(,|$) ]]; then
          printf '%s\n' "$0: ERROR: Specified layout is not in the previously specified layout list!"
          continue
        fi
        localectl list-x11-keymap-variants "${variant_key_str}"
      fi
      continue
    fi
    if [ "${variant_str,,}" = 'help' ]; then
      interactive_ui_help_variant
      continue
    fi
    if [ "${variant_str}" = 'exit' ]; then
      printf '%s\n' "$0: INFO: Exiting without setting keyboard layout."
      exit 0
    fi
    if check_keyboard_layout_variants "${layout_str}" "${variant_str}"; then
      break
    fi
  done

  while true; do
    read -r -p 'Enter the keyboard layout option(s) if desired, leave empty otherwise: ' -- option_str
    printf '\n'
    if [ -z "${option_str}" ]; then
      break
    fi
    ## More normalizing, again we can't normalize everything to lowercase
    ## because some options like "eurosign:E" contain capital letters.
    option_str="$(tr -d ' ' <<< "${option_str}")"
    if [ "${option_str,,}" = 'list' ]; then
      localectl list-x11-keymap-options
      continue
    fi
    if [ "${option_str,,}" = 'help' ]; then
      interactive_ui_help_option
      continue
    fi
    if [ "${option_str}" = 'exit' ]; then
      printf '%s\n' "$0: INFO: Exiting without setting keyboard layout."
      exit 0
    fi
    if check_keyboard_layout_options "${option_str}"; then
      break
    fi
  done

  set_labwc_keymap "${layout_str}" "${variant_str}" "${option_str}" || exit 1
  printf '%s\n' "$0: INFO: Keyboard layout change successful."
}

print_usage() {
  printf '%s\n' "$0: Set keyboard layout for labwc" >&2
  printf '%s\n' "Usage: $0 [--help] [--persist] [--no-reload] [--config <path>] [--interactive] -- [layout [variant [option]]]" >&2
  printf '%s\n' 'Options:' >&2
  printf '%s\n' '--help           Print this help message.' >&2
  printf '%s\n' '--persist        Make layout change persistent.' >&2
  printf '%s\n' '--no-reload      Skip reloading labwc config. Only makes sense with --persist.' >&2
  printf '%s\n' '--config <path>  Specify an alternative config file path.' >&2
  printf '%s\n' '--interactive    Show an interactive user interface.' >&2
  printf '%s\n' '' >&2
  printf '%s\n' 'Examples:' >&2
  printf '%s\n' '  set-labwc-keymap de' >&2
  printf '%s\n' '  set-labwc-keymap --persist us colemak' >&2
  printf '%s\n' '  set-labwc-keymap us,cz,de "" grp:alt_shift_toggle' >&2
}

while [ -n "${1:-}" ]; do
  case "${1:-}" in
    '--persist')
      do_persist='true'
      shift
      ;;
    '--help'|'-h')
      print_usage
      exit 0
      ;;
    '--no-reload')
      no_reload='true'
      shift
      ;;
    '--config')
      if [ -z "${2:-}" ]; then
        printf '%s\n' "$0: ERROR: No config path specified!" >&2
        exit 1
      fi
      labwc_config_path="${2:-}"
      shift 2
      ;;
    '--interactive')
      interactive='true'
      shift
      ;;
    '--')
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

## Enter interactive mode if requested.
if [ "${interactive}" = 'true' ]; then
  interactive_ui || exit 1
  exit 0
fi

## Parse command line arguments otherwise
args=( "$@" )
## We must have at least one, but no more than three, arguments specifying the
## keyboard layout(s).
if [ "${#args[@]}" = '0' ] || [ -z "${args[0]:-}" ] \
  || (( ${#args[@]} > 3 )); then
  print_usage
  exit 1
fi

## If we have less than three arguments, populate the `args` array with empty
## strings for the remaining arguments. This will make labwc unset the
## corresponding XKB environment variables internally, allowing the user to
## run something like `set-labwc-keymap us colemak`, then
## `set-labwc-keymap us` and have their keyboard not stuck in the Colemak
## layout after the second command.
while (( ${#args[@]} < 3 )); do
  args+=( '' )
done

set_labwc_keymap "${args[@]}" || exit 1

true "$0: END"
