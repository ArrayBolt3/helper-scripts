#!/bin/bash

## Copyright (C) 2025 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -o errexit
set -o nounset
set -o errtrace
set -o pipefail

true "$0: START"

command -v safe-rm >/dev/null
command -v localectl >/dev/null
command -v mktemp >/dev/null
command -v mv >/dev/null
command -v mkdir >/dev/null
command -v overwrite >/dev/null

xkb_variable_names=(
  'XKB_DEFAULT_LAYOUT'
  'XKB_DEFAULT_VARIANT'
  'XKB_DEFAULT_OPTIONS'
)
do_persist='false'

## Checks to see if all items in "check_str" are present in the output of a
## command that lists valid items.
is_layout_data_valid() {
  local valid_list_cmd check_str check_list check_item valid_item_list \
    valid_item is_item_valid

  check_str="${1:-}"
  shift
  valid_list_cmd=( "$@" )
  if [ "${#valid_list_cmd[@]}" = '0' ] || [ -z "${valid_list_cmd[0]}" ]; then\
    return 1
  fi
  if [ -z "${check_str}" ]; then return 1; fi

  readarray -t check_list < <(printf '%s\n' "${check_str}" | tr ',' '\n')
  readarray -t valid_item_list < <("${valid_list_cmd[@]}")

  for check_item in "${check_list[@]}"; do
    if [ -z "${check_item}" ]; then continue; fi
    is_item_valid='false'
    for valid_item in "${valid_item_list[@]}"; do
      if [ "${check_item}" = "${valid_item}" ]; then
        is_item_valid='true'
        break
      fi
    done
    if [ "${is_item_valid}" = 'false' ]; then
      return 1
    fi
  done

  return 0
}

## Sets the XKB layout(s), variant(s), and option(s) in labwc, either for just
## this session or persistently.
set_labwc_keymap() {
  local labwc_config_path labwc_config_bak_path labwc_env_file_lines \
    did_replace_var var_idx conf_idx kb_layout_list kb_variant_list \
    kb_idx args labwc_env_file_string

  labwc_config_path="${HOME}/.config/labwc/environment"
  labwc_config_bak_path=''
  labwc_env_file_lines=()
  args=( "$@" )
  if [ "${#args[@]}" != '3' ]; then
    printf '%s\n' "$0: ERROR: Argument handling failure!"
    return 1
  fi

  ## Ensure the user has no more than four keyboard layouts specified (this
  ## is the maximum number supported by XKB under X11 according to
  ## https://www.x.org/archive/X11R7.5/doc/input/XKB-Config.html, and it is
  ## the maximum number labwc appears to support).
  readarray -t kb_layout_list < <(printf '%s\n' "${args[0]}" | tr ',' '\n')
  if (( ${#kb_layout_list[@]} > 4 )); then
    printf '%s\n' "$0: ERROR: Too many keyboard layouts specified, must specify 4 or less!"
    return 1
  fi

  ## Ensure the specified keyboard layout(s) are valid.
  if ! is_layout_data_valid "${args[0]}" \
    localectl list-x11-keymap-layouts ; then
    printf '%s\n' "$0: ERROR: Specified keyboard layout(s) are not all valid!"
    printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-layouts' to get a list of valid layouts."
    return 1
  fi

  ## Ensure the specified keyboard layout variant(s) are valid.
  if [ -n "${args[1]:-}" ]; then
    readarray -t kb_variant_list < <(printf '%s\n' "${args[1]}" | tr ',' '\n')

    if (( ${#kb_layout_list[@]} < ${#kb_variant_list[@]} )); then
      printf '%s\n' "$0: ERROR: Insufficient number of keyboard layouts specified for number of variants!"
      return 1
    fi

    for kb_idx in "${!kb_layout_list[@]}"; do
      if [ -z "${kb_variant_list[kb_idx]}" ]; then continue; fi
      if ! is_layout_data_valid "${kb_variant_list[kb_idx]}" \
        localectl list-x11-keymap-variants "${kb_layout_list[kb_idx]}" ; then
        printf '%s\n' "$0: ERROR: Specified keyboard layout variant for layout '${kb_layout_list[kb_idx]}' is not valid!"
        printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-variants '${kb_layout_list[kb_idx]}'' to get a list of valid layout variants for the '${kb_layout_list[kb_idx]}' layout."
        return 1
      fi
    done
  fi

  ## Ensure the specified keyboard option(s) are valid.
  if [ -n "${args[2]:-}" ]; then
    if ! is_layout_data_valid "${args[2]}" \
      localectl list-x11-keymap-options ; then
      printf '%s\n' "$0: ERROR: Specified keyboard layout option(s) are not valid!"
      printf '%s\n' "$0: INFO: Run 'localectl list-x11-keymap-options' to get a list of valid layout options."
      return 1
    fi
  fi

  ## Ensure the labwc configuration directory exists.
  mkdir --parents -- "$(dirname "${labwc_config_path}")" || {
    printf '%s\n' "$0: ERROR: Cannot create labwc config directory!"
    return 1
  }

  ## If labwc's environment config file exists, read it.
  if [ -f "${labwc_config_path}" ]; then
    if ! [ -r "${labwc_config_path}" ]; then
      printf '%s\n' "$0: ERROR: Cannot read existing labwc environment config!"
      return 1
    fi

    readarray -t labwc_env_file_lines < "${labwc_config_path}"

    ## If we do not want the new configuration to be persistent, move the
    ## existing configuration to a temporary backup location.
    if [ "${do_persist}" = 'false' ]; then
      labwc_config_bak_path="$(mktemp)"
      mv -- "${labwc_config_path}" "${labwc_config_bak_path}" || {
        printf '%s\n' "$0: ERROR: Cannot move existing labwc environment config to backup location!"
        return 1
      }
    fi
  fi

  ## Loop through the variables we want to set. For each variable in `args`,
  ## the variable's name is specified in the corresponding element in
  ## `xkb_variable_names`.
  for var_idx in "${!args[@]}"; do
    if (( var_idx >= 3 )); then break; fi

    ## Loop through the lines of the existing labwc environment configuration.
    ## Change already-set keyboard-layout-related variables to new values,
    ## append variables that we want to set but that aren't defined yet.
    ## Remove duplicate variable assignments so that the variables we set
    ## don't get overridden.
    did_replace_var='false'
    for conf_idx in "${!labwc_env_file_lines[@]}"; do
      ## Note that we use a capturing group around leading whitespace - this
      ## allows us to prepend ${BASH_REMATCH[1]} to the replacement line,
      ## preserving the indentation.
      if [[ "${labwc_env_file_lines[conf_idx]}" \
        =~ ^([[:space:]]*)"${xkb_variable_names[var_idx]}=" ]]; then
        if [ "${did_replace_var}" = 'false' ]; then
          labwc_env_file_lines[conf_idx]="${BASH_REMATCH[1]}${xkb_variable_names[var_idx]}=${args[var_idx]}"
          did_replace_var='true'
        else
          unset "labwc_env_file_lines[${conf_idx}]"
        fi
      fi
    done

    ## Remove any holes from the `labwc_env_file_lines` array.
    labwc_env_file_lines=( "${labwc_env_file_lines[@]}" )

    ## If we replaced a variable assignment in the configuration file, skip
    ## the rest of this loop iteration.
    if [ "${did_replace_var}" = 'true' ]; then
      continue
    fi

    ## Append the new environment variable to the configuration file's
    ## contents.
    labwc_env_file_lines+=(
      "${xkb_variable_names[var_idx]}=${args[var_idx]}"
    )
  done

  labwc_env_file_string="$(printf '%s\n' ${labwc_env_file_lines[*]})"

  ## Write the new config file contents and load them into labwc.
  overwrite "${labwc_config_path}" "${labwc_env_file_string}" || {
    printf '%s\n' "$0: ERROR: Cannot write new labwc environment config!"
    return 1
  }

  printf '%s\n' "INFO: new '${labwc_config_path}' contents:"
  stcat "${labwc_config_path}"

  if ! command -v labwc >/dev/null; then
    printf '%s\n' "$0: WARNING: 'labwc' not available in PATH or not installed."
  else
    labwc --reconfigure \
      || printf '%s\n' "$0: WARNING: 'labwc' reconfiguration failed!"
  fi

  ## If we do not want to persist the new configuration, put the old
  ## configuration back (or just delete the new config file if there wasn't an
  ## old config file).
  if [ -n "${labwc_config_bak_path}" ]; then
    mv -- "${labwc_config_bak_path}" "${labwc_config_path}" || {
      printf '%s\n' "$0: ERROR: Cannot move backup labwc environment config to original location!"
      return 1
    }
  elif [ "${do_persist}" = 'false' ]; then
    safe-rm -- "${labwc_config_path}" || {
      printf '%s\n' "$0: ERROR: Cannot remove temporary labwc environment config!"
      return 1
    }
  fi
}

print_usage() {
  printf '%s\n' "$0: Set keyboard layout for labwc"
  printf '%s\n' "Usage: $0 [--help] [--persist] [layout [variant [option]]]"
  printf '%s\n' 'Options:'
  printf '%s\n' '--help     Print this help message'
  printf '%s\n' '--persist  Make layout change persistent'
  printf '%s\n' ''
  printf '%s\n' 'Examples:'
  printf '%s\n' '  set-labwc-keymap de'
  printf '%s\n' '  set-labwc-keymap --persist us colemak'
  printf '%s\n' '  set-labwc-keymap us,cz,de "" grp:alt_shift_toggle'
}

if [ "${1:-}" = '--persist' ]; then
  do_persist='true'
  shift
fi
if [ "${1:-}" = '--help' ] || [ "${1:-}" = '-h' ]; then
  print_usage
  exit 0
fi

args=( "$@" )
## We must have at least one, but no more than three, arguments specifying the
## keyboard layout(s).
if [ "${#args[@]}" = '0' ] || [ -z "${args[0]:-}" ] \
  || (( ${#args[@]} > 3 )); then
  print_usage
  exit 1
fi

## If we have less than three arguments, populate the `args` array with empty
## strings for the remaining arguments. This will make labwc unset the
## corresponding XKB environment variables internally, allowing the user to
## run something like `set-labwc-keymap us colemak`, then
## `set-labwc-keymap us` and have their keyboard not stuck in the Colemak
## layout after the second command.
while (( ${#args[@]} < 3 )); do
  args+=( '' )
done

set_labwc_keymap "${args[@]}" || exit

true "$0: END"
