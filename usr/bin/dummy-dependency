#!/bin/bash

## Copyright (C) 2024 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

## Usage:
## dummy-dependency [--remove|--purge] [-y|--yes] 'package-name'

#set -x
set -e
set -o errtrace
set -o pipefail
set -o nounset

true "$0: INFO: START"

show_usage() {
   echo "Usage: $0 [--remove|--purge] [-y|--yes] 'package-name'" >&2
   exit 1
}

cleanup() {
   if [ -n "${TMPDIR_NEW:-}" ] && [ -d "${TMPDIR_NEW}" ]; then
      safe-rm -r -f "${TMPDIR_NEW}"
   fi
}

root_check() {
   if [ "$(id -u)" -ne 0 ]; then
      echo "FATAL ERROR: This script must be run as root." >&2
      exit 1
   fi
}

trap cleanup EXIT

dummy_dependency() {
   local equivs_file deb_file_original deb_file_copy equivs_content equivs_build_log

   root_check

   # Validate package name, see
   # https://www.debian.org/doc/debian-policy/ch-controlfields.html#source
   if ! grep --quiet '^[a-z0-9]\+[a-z0-9+-.]\+$' -- <<< "${package_to_replace}" ; then
      echo 'FATAL ERROR: Package name is invalid, check for typos' >&2
      exit 1
   fi

   ## Not actually needed, mktemp can function perfectly well without TMPDIR
   # if [ -z "${TMPDIR:-}" ]; then
   #    echo 'FATAL ERROR: TMPDIR is unset.' >&2
   #    exit 1
   # fi

   ## Ensure $TMPDIR is set
   if [ ! -v TMPDIR ]; then
      TMPDIR=''
   fi

   ## ${TMPDIR} is an already existing environment variable.
   TMPDIR_OLD="${TMPDIR}"

   TMPDIR_NEW="$(mktemp --directory)"

   ## equivs-build uses ${TMPDIR} for builds
   TMPDIR="${TMPDIR_NEW}"
   export TMPDIR

   equivs_file="${TMPDIR_NEW}/${package_to_replace}.equivs"
   ## equivs-build uses ${TMPDIR} for builds
   deb_file_original="${TMPDIR_NEW}/dummy-${package_to_replace}_99_all.deb"
   deb_file_copy="/var/lib/dummy-dependency/dummy-${package_to_replace}_99_all.deb"

   echo "Creating dummy replacement for '${package_to_replace}'..."

   equivs_content="Package: dummy-${package_to_replace}
Version: 99:99
Maintainer: dummy-dependency script <dummy-dependency@dummy-dependency.invalid>
Breaks: ${package_to_replace}
Replaces: ${package_to_replace}
Provides: ${package_to_replace}
Architecture: all
Description: dummy-package for '${package_to_replace}'
 A metapackage that replaces '${package_to_replace}'."

   echo "${equivs_content}" | sponge -- "${equivs_file}"

   if ! equivs_build_log="$(equivs-build -- "${equivs_file}" 2>&1)" ; then
      echo "FATAL ERROR: 'equivs-build -- \"${equivs_file}\"' command failed!" >&2
      echo 'Logs:' >&2
      echo "${equivs_build_log}" >&2
      exit 1
   fi

   ## Reset to previously set TMPDIR.
   TMPDIR="${TMPDIR_OLD}"

   echo 'Dummy package created. Installing...'

   test -r "${deb_file_original}"

   mkdir --parents /var/lib/dummy-dependency
   ## Avoid APT warning:
   ## N: Download is performed unsandboxed as root as file '/tmp/user/0/tmp.8O7ET4e1Bx/dummy-user-sysmaint-split_99_all.deb' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied)
   cp "${deb_file_original}" "${deb_file_copy}"

   #lintian --pedantic --info --display-info "${deb_file_copy}"

   echo "apt-get $yes_option install -- ${deb_file_copy}"
   if ! apt-get $yes_option install -- "${deb_file_copy}" ; then
      echo 'FATAL ERROR: apt-get install command failed!' >&2
      exit 1
   fi
   echo 'Dummy package installed.'

   if [ "${remove_option}" = '--purge' ]; then
      echo 'Purging old package configuration files...'
      echo "apt-get $yes_option purge -- ${package_to_replace}"
   fi

   cleanup
   trap '' EXIT
   true "$0: INFO: END"
   exit 0
}

## Declare global variables
TMPDIR_OLD=''
TMPDIR_NEW=''
package_to_replace=""
yes_option=""
remove_option="--remove"

## Main execution
while [ "$#" -gt 0 ]; do
   case "$1" in
      -y|--yes)
         yes_option="--yes"
         shift
         ;;
      --remove|--purge)
         remove_option="$1"
         shift
         ;;
      *)
         package_to_replace="$1"
         shift
         ;;
   esac
done

[ -z "${package_to_replace}" ] && show_usage

dummy_dependency
