#!/bin/bash

## Copyright (C) 2025 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

read_integer_file() {
  local target_file lower_bound upper_bound file_contents

  target_file="${1:-}"
  lower_bound="${2:-}"
  upper_bound="${3:-}"
  if [ -z "$target_file" ]; then
    printf '%s\n' "$0: ERROR: No target file specified!" >&2
    return 1
  fi
  if [ -n "$lower_bound" ] && ! [[ "$lower_bound" =~ ^[0-9]+$ ]]; then
    printf '%s\n' "$0: ERROR: Non-numeric lower bound specified!" >&2
    return 1
  fi
  if [ -n "$upper_bound" ] && ! [[ "$upper_bound" =~ ^[0-9]+$ ]]; then
    printf '%s\n' "$0: ERROR: Non-numeric upper bound specified!" >&2
    return 1
  fi

  if ! file_contents="$(cat "$target_file")" ; then
    printf '%s\n' "$0: ERROR: Cannot read target file!" >&2
    return 1
  fi
  if [ -z "$file_contents" ]; then
    printf '%s\n' "$0: ERROR: Empty target file!" >&2
    return 1
  fi
  if ! [[ "$file_contents" =~ ^[0-9]+$ ]]; then
    printf '%s\n' "$0: ERROR: Non-numeric value in target file!" >&2
    return 1
  fi
  if [ -n "$lower_bound" ] && (( file_contents < lower_bound )); then
    printf '%s\n' "$0: ERROR: Target file's value '$file_contents' is below the lower bound '$lower_bound'!" >&2
    return 1
  fi
  if [ -n "$upper_bound" ] && (( file_contents > upper_bound )); then
    printf '%s\n' "$0: ERROR: Target file's value '$file_contents' is above the upper bound '$upper_bound'!" >&2
    return 1
  fi

  printf '%s\n' "$file_contents"
}

check_is_not_empty_and_only_one_line() {
   local varname value number_of_lines

   if [ -z "$1" ]; then
      printf '%s\n' "$0: ERROR: No variable name provided to check_is_not_empty_and_only_one_line." >&2
      return 1
   fi

   varname="$1"
   value="${!varname}"

   # Trim leading/trailing spaces while preserving newlines.
   IFS= read -r trimmed_value <<< "$value"

   # Check if value is empty or only contains spaces/newlines.
   if [[ -z "$trimmed_value" || -z "${value//[[:space:]]/}" ]]; then
      printf '%s\n' "$0: ERROR: Variable '$varname' is empty or contains only whitespace/newlines." >&2
      return 1
   fi

   # Count the number of lines using mapfile.
   mapfile -t lines <<< "$value"
   number_of_lines="${#lines[@]}"

   if [ "$number_of_lines" -ne 1 ]; then
      printf '%s\n' "$0: ERROR: Variable '$varname' contains more than one line. Content:
'$value'" >&2
      return 1
   fi

   return 0
}

## Converts $1 to a newline-separated, properly escaped list.
## Strips leading and trailing space, crunches multiple
## consecutive spaces into single spaces, then converts spaces to newlines
## and adds spaces and backslashes where necessary.
trim_collapse_split() {
   local input_list="$1"
   local trimmed_list cleaned_list formatted_list

   ## Step 1: Trim leading and trailing spaces.
   trimmed_list="$(printf '%s\n' "$input_list" | sed 's/^\s\+//g; s/\s\+$//g')"

   ## Step 2: Replace multiple spaces with a single space.
   cleaned_list="$(printf '%s\n' "$trimmed_list" | sed 's/\s\+/ /g')"

   ## Step 3: Replace spaces with ' \n' (newline prefixed by space).
   formatted_list="$(printf '%s\n' "$cleaned_list" | sed 's/\s/ \\\n/g')"

   printf '%s\n' "$formatted_list"
}

## success: whole numbers such as 1 2 3 456 etc.
## fail:
## 5.5
## 5,500
## trailing spaces
## leading spaces
## empty input
## space only
## scientific notation such as 1.23e10
## negative numbers such as -1
is_whole_number() {
   [[ "$1" =~ ^[0-9]+$ ]]
}

## NOTE: Duplicated in package 'uwt' file 'curl.anondist'.
random_alpha_numeric() {
  local n="${1:-43}"
  LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/random | head --bytes="$n" || true
  printf '%s\n' ""
}

run_test() {
   local test_name varname value expected_exit_code
   test_name="$1"
   varname="$2"
   value="$3"
   expected_exit_code="$4"

   eval "$varname=\"\$value\""
   printf '%s\n' "$0: Running test: $test_name"

   exit_code=0
   check_is_not_empty_and_only_one_line "$varname" 2>/dev/null || { exit_code=$? ; true; };

   if [ "$exit_code" -eq "$expected_exit_code" ]; then
      printf '%s\n' "$0: Test Passed"
   else
      printf '%s\n' "$0: Test Failed (Expected exit code: $expected_exit_code, Got: $exit_code)" >&2
      return 1
   fi
   printf '%s\n' "---------------------------------"
}

tests() {
   set -e
   set -o errtrace
   set -o pipefail
   set -o nounset

   run_test "Empty variable" "testvar1" "" 1
   run_test "Only newlines" "testvar2" "


   " 1
   run_test "Whitespace only" "testvar3" "   " 1
   run_test "Single valid line" "testvar4" "Hello, World!" 0
   run_test "Multiple lines" "testvar5" "Hello
   World" 1
   run_test "Leading and trailing spaces" "testvar6" "  Hello  " 0
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
   tests
fi

#trim_collapse_split " aaa  bbb ccc ddd "
#flavor_meta_packages_to_install='kicksecure-baremetal-gui-lxqt kicksecure-baremetal-server'
#trim_collapse_split "$flavor_meta_packages_to_install"
